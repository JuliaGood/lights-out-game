{"version":3,"sources":["Cell.js","Board.js","App.js","index.js"],"names":["Cell","props","handleClick","bind","evt","this","flipCellsAroundMe","classes","isLit","className","onClick","Component","Board","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","changeLightStartsOn","console","log","coord","split","map","Number","flipCell","every","cell","setState","tableBoard","flipCellsAround","defaultProps","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAiCeA,E,kDAnBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFF,E,+CAKnB,SAAYC,GAEVC,KAAKJ,MAAMK,sB,oBAGb,WACE,IAAIC,EAAU,QAAUF,KAAKJ,MAAMO,MAAQ,YAAc,IAEzD,OACI,oBAAIC,UAAWF,EAASG,QAASL,KAAKH,kB,GAf3BS,aCabC,G,wDAOJ,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACXC,QAAQ,EACRC,MAAO,EAAKC,eAJG,E,+CAWnB,WAGE,IADA,IAAID,EAAQ,GACHE,EAAI,EAAGA,EAAIZ,KAAKJ,MAAMiB,MAAOD,IAAK,CAEzC,IADA,IAAIE,EAAM,GACDC,EAAI,EAAGA,EAAIf,KAAKJ,MAAMoB,MAAOD,IACpCD,EAAIG,KAAKC,KAAKC,SAAWnB,KAAKJ,MAAMwB,qBAItCV,EAAMO,KAAKH,GAGb,OADAO,QAAQC,IAAI,QAASZ,GACdA,I,6BAST,SAAgBa,GACdF,QAAQC,IAAI,YAAaC,GADJ,MAEAvB,KAAKJ,MAArBoB,EAFgB,EAEhBA,MAAOH,EAFS,EAETA,MACRH,EAAQV,KAAKQ,MAAME,MAHF,EAIRa,EAAMC,MAAM,KAAKC,IAAIC,QAJb,mBAIhBd,EAJgB,KAIbG,EAJa,KAOrB,SAASY,EAASf,EAAGG,GAEfA,GAAK,GAAKA,EAAIC,GAASJ,GAAK,GAAKA,EAAIC,IACvCH,EAAME,GAAGG,IAAML,EAAME,GAAGG,IAK5BY,EAASf,EAAGG,GACZY,EAASf,EAAGG,EAAI,GAChBY,EAASf,EAAGG,EAAI,GAChBY,EAASf,EAAI,EAAGG,GAChBY,EAASf,EAAI,EAAGG,GAIhB,IAAIN,EAASC,EAAMkB,OAAM,SAAAd,GAAG,OAAIA,EAAIc,OAAM,SAAAC,GAAI,OAAKA,QACnD7B,KAAK8B,SAAS,CACZpB,MAAOA,EACPD,OAAQA,M,oBAOZ,WAAU,IAAD,OAEP,GAAIT,KAAKQ,MAAMC,OACb,OACE,qBAAKL,UAAU,cAAf,SACE,sBAAKA,UAAU,SAAf,UACE,sBAAMA,UAAU,cAAhB,iBACA,sBAAMA,UAAU,YAAhB,uBAOR,IADA,IAAI2B,EAAa,GACRnB,EAAI,EAAGA,EAAIZ,KAAKJ,MAAMiB,MAAOD,IAAK,CAEzC,IADA,IAAIE,EAAM,GAD+B,WAEhCC,GACP,IAAIQ,EAAK,UAAMX,EAAN,YAAWG,GACpBD,EAAIG,KACF,cAAC,EAAD,CAEEd,MAAO,EAAKK,MAAME,MAAME,GAAGG,GAC3Bd,kBAAmB,kBAAM,EAAK+B,gBAAgBT,KAFzCA,KAJFR,EAAI,EAAGA,EAAIf,KAAKJ,MAAMoB,MAAOD,IAAM,EAAnCA,GAUTgB,EAAWd,KAAK,6BAAaH,GAAJF,IAG3B,OACE,sBAAKR,UAAU,YAAf,UACE,sBAAKA,UAAU,cAAf,UACE,qBAAKA,UAAU,cAAf,oBACA,qBAAKA,UAAU,YAAf,oBAEF,uBAAOA,UAAU,QAAjB,SACA,gCACG2B,a,GA9GSzB,cAAdC,EACG0B,aAAe,CACpBpB,MAAO,EACPG,MAAO,EACPI,oBAAqB,KAmHVb,QCnIA2B,G,kKATb,WACE,OACE,qBAAK9B,UAAU,MAAf,SACE,cAAC,EAAD,U,GAJUE,cCClB6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f488d2ea.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Cell.css';\r\n\r\n/* a single cell on the board.\r\n\r\nThis has no state --- just two props:\r\n  - flipCellsAroundMe: a function rec'd from the board which \r\n    flips this cell and the cells around of it\r\n  - isLit: boolean, is this cell lit?\r\n\r\nThis handles clicks --- by calling flipCellsAroundMe\r\n*/\r\n\r\nclass Cell extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(evt) {\r\n    // call up to the board to flip cells around this cell\r\n    this.props.flipCellsAroundMe();\r\n  }\r\n\r\n  render() {\r\n    let classes = \"cell\" + (this.props.isLit ? \" cell-lit\" : \"\");\r\n\r\n    return (\r\n        <td className={classes} onClick={this.handleClick} />\r\n    )\r\n  }\r\n}\r\n\r\nexport default Cell;\r\n","import React, { Component } from 'react';\r\nimport Cell from './Cell';\r\nimport './Board.css';\r\n\r\n/* board of Lights Out game.\r\n\r\nProperties:\r\n- nrows: number of rows of board\r\n- ncols: number of cols of board\r\n- changeLightStartsOn: float, chance any cell is lit at start of game\r\n\r\nState:\r\n- hasWon: boolean, true when board is all off\r\n- board: array-of-arrays of true/false\r\n\r\nFor this board:\r\n  .  .  .\r\n  O  O  .     (where . is off, and O is on)\r\n  .  .  .\r\n\r\nThis would be: [[f, f, f], [t, t, f], [f, f, f]]\r\nThis should render an HTML table of individual <Cell /> components.\r\nThis doesn't handle any clicks --- clicks are on individual cells.\r\n\r\n*/\r\n\r\nclass Board extends Component {\r\n  static defaultProps = {\r\n    nrows: 5,\r\n    ncols: 5,\r\n    changeLightStartsOn: 0.25,\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasWon: false,\r\n      board: this.createBoard(),\r\n    }\r\n  }\r\n\r\n  // this F creates an initial board nrows high/ncols wide, \r\n  // each cell randomly lit or unlit (we call this F in the state!)\r\n\r\n  createBoard() { \r\n    // TODO: create array-of-arrays of true/false values\r\n    let board = [];\r\n    for (let y = 0; y < this.props.nrows; y++) {\r\n      let row = [];\r\n      for (let x = 0; x < this.props.ncols; x++) {\r\n        row.push(Math.random() < this.props.changeLightStartsOn)\r\n        // Math.random returns a value between 0 and 1, so if\r\n        // it is less than 0.25 - it will be true, otherwise - false\r\n      }\r\n      board.push(row);\r\n    }\r\n    console.log('board', board);\r\n    return board;\r\n  }\r\n\r\n  // handle changing a cell: update board & determine if winner\r\n  // the bulk of the logic is here - in the flipCellsAround function\r\n  // this method is called when we click on an individual Cell.\r\n  // we need to know which one is being clicked on, and instead of doing a \r\n  // unique ID - we can just identify each cell based off of its coordinates.\r\n\r\n  flipCellsAround(coord) {\r\n    console.log(\"Flipping!\", coord);\r\n    let {ncols, nrows} = this.props;\r\n    let board = this.state.board;\r\n    let [y, x] = coord.split(\"-\").map(Number);\r\n    // this splits the X and Y coordinates \r\n\r\n    function flipCell(y, x) {\r\n      // if this coord is actually on board, flip it\r\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\r\n        board[y][x] = !board[y][x];\r\n      }\r\n    }\r\n\r\n    // TODO: flip this cell and the cells around it\r\n    flipCell(y, x);     // Flip initial cell\r\n    flipCell(y, x - 1); // Flip left\r\n    flipCell(y, x + 1); // Flip right\r\n    flipCell(y - 1, x); // Flip below\r\n    flipCell(y + 1, x); // Flip above\r\n\r\n    // win when every cell is turned off\r\n    // TODO: determine is the game has been won\r\n    let hasWon = board.every(row => row.every(cell => !cell));\r\n    this.setState({\r\n      board: board, \r\n      hasWon: hasWon \r\n    });\r\n  }\r\n\r\n\r\n  // Render game board or winning message.\r\n\r\n  render() {\r\n    // if the game is won, just show a winning msg & render nothing else\r\n    if (this.state.hasWon) {\r\n      return (\r\n        <div className='board-title'>\r\n          <div className='winner'>\r\n            <span className=\"neon-orange\">YOU</span>\r\n            <span className=\"neon-blue\">WON!</span>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    // else make a table board with Cell\r\n    let tableBoard = [];\r\n    for (let y = 0; y < this.props.nrows; y++) {\r\n      let row = [];\r\n      for (let x = 0; x < this.props.ncols; x++) {\r\n        let coord = `${y}-${x}`\r\n        row.push(\r\n          <Cell \r\n            key={coord} \r\n            isLit={this.state.board[y][x]} \r\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}\r\n          />\r\n        );\r\n      }\r\n      tableBoard.push(<tr key={y}>{row}</tr>)\r\n      // because each row must to be inside of <tr> tag\r\n    }\r\n    return(\r\n      <div className='board-box'>\r\n        <div className='board-title'>\r\n          <div className=\"neon-orange\">Lights</div>\r\n          <div className=\"neon-blue\">Out</div>\r\n        </div>\r\n        <table className='board'>\r\n        <tbody>\r\n          {tableBoard}\r\n        </tbody>\r\n      </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Board;\r\n","import React, { Component } from 'react';\r\nimport Board from './Board';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className='app'>\r\n        <Board />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}